[ConsoleHistoryPython]
History="import unreal\r\n\r\n########################################\r\n# 1.  SET-UP:  paths, animations, names\r\n########################################\r\nSKEL_PATH  = \"/Game/Characters/Player_Niko_Skeleton\"\r\nIDLE_ANIM  = \"/Game/Animations/Idle\"\r\nRUN_ANIM   = \"/Game/Animations/Run\"\r\nSPRINT_ANIM= \"/Game/Animations/Sprint\"\r\n\r\nPACKAGE_PATH = \"/Game/Animations\"\r\nABP_NAME     = \"ABP_Niko_Auto\"\r\n\r\n########################################\r\n# 2.  CREATE the Animation Blueprint\r\n########################################\r\nasset_tools = unreal.AssetToolsHelpers.get_asset_tools()\r\nfactory     = unreal.AnimBlueprintFactory()\r\nfactory.target_skeleton = unreal.load_asset(SKEL_PATH)\r\n\r\nabp = asset_tools.create_asset(\r\n        ABP_NAME,\r\n        PACKAGE_PATH,\r\n        unreal.AnimBlueprint,\r\n        factory)\r\n\r\nif not abp:\r\n    unreal.log_error(\"ABP creation failed\");  raise SystemExit\r\n\r\n########################################\r\n# 3.  BUILD the State Machine graph\r\n########################################\r\n#   • grab the generated AnimGraph\r\n#   • add a state machine node called “Locomotion”\r\n#   • create Idle / Run / Sprint states\r\n#   • plug Sequence-Players and transitions\r\n########################################\r\nblueprint_lib  = unreal.EditorScriptingUtilities\r\ngraph_lib      = unreal.AnimationBlueprintLibrary\r\ned_graph_lib   = unreal.GraphEditAction\r\n\r\n# Open the BP for edit\r\ngraph_lib.open_editor_for_asset(abp)\r\n\r\n# Get the AnimGraph\r\nanim_graph = graph_lib.get_graph(abp, \"AnimGraph\")\r\n\r\n# Add the StateMachine node\r\nsm_node = graph_lib.add_state_machine_graph(\r\n            target_anim_blueprint = abp,\r\n            parent_graph          = anim_graph,\r\n            state_machine_name    = \"Locomotion\")\r\n\r\n# Convenience lambda to spawn a state with a SequencePlayer\r\ndef add_state(name, anim_path):\r\n    state = graph_lib.add_anim_state_node(\r\n                target_anim_blueprint = abp,\r\n                state_machine_graph   = sm_node,\r\n                state_name            = name,\r\n                x_pos                 = 0, \r\n                y_pos                 = 0)\r\n    seq_player = graph_lib.add_sequence_player_node(\r\n                    target_anim_blueprint = abp,\r\n                    graph                 = state,\r\n                    sequence              = unreal.load_asset(anim_path))\r\n    graph_lib.make_link(seq_player, \"Pose\", state.result_node, \"Result\")\r\n    return state\r\n\r\nidle_state   = add_state(\"Idle\",   IDLE_ANIM)\r\nrun_state    = add_state(\"Run\",    RUN_ANIM)\r\nsprint_state = add_state(\"Sprint\", SPRINT_ANIM)\r\n\r\n# Add transitions and rules\r\ndef add_transition(from_state, to_state, rule_string):\r\n    transition = graph_lib.add_transition_graph(\r\n                    target_anim_blueprint = abp,\r\n                    state_machine_graph   = sm_node,\r\n                    previous_state        = from_state,\r\n                    next_state            = to_state)\r\n    # Insert rule:  `return` followed by your expression\r\n    rule_node = graph_lib.get_graph(transition, \"TransitionGraph\").nodes[0]\r\n    rule_node.get_graph().get_schema().try_set_node_comment(rule_node, rule_string)\r\n    graph_lib.set_node_expression(rule_node, rule_string)\r\n\r\n# Transition rules use the Speed float you’ll set in the EventGraph.\r\nadd_transition(idle_state,   run_state,    \"return Speed > 10.0;\")\r\nadd_transition(run_state,    idle_state,   \"return Speed <= 10.0;\")\r\nadd_transition(run_state,    sprint_state, \"return Speed >= 400.0;\")\r\nadd_transition(sprint_state, run_state,    \"return Speed < 400.0;\")\r\nadd_transition(sprint_state, idle_state,   \"return Speed <= 10.0;\")\r\n\r\n########################################\r\n# 4.  EVENT GRAPH:  compute Speed\r\n########################################\r\ngraph_lib.add_blueprint_member_variable(abp, \"Speed\", unreal.FloatProperty())\r\nevent_graph = graph_lib.get_graph(abp, \"EventGraph\")\r\n\r\n# Auto-generate:\r\n#    Event Blueprint Update Animation  →\r\n#    Get Pawn Owner → Get Velocity → VectorLength → Set Speed\r\ngraph_lib.add_update_animation_event_nodes(abp, event_graph, \"Speed\")\r\n\r\n########################################\r\n# 5.  SAVE & DONE\r\n########################################\r\nunreal.EditorAssetLibrary.save_loaded_asset(abp)\r\nunreal.log(\"Animation Blueprint generated successfully.\")\r\n"
History=stat unit

[ConsoleHistory]
History=stat unit

